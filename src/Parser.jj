
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(Parser)

public class Parser {
  
  public static void main(String args[]) throws ParseException {

    System.out.println("JavaCC Parser:  Reading from file " + "testfile.java" + " . . .");
    try {
      parser = new JavaCCParser(new java.io.FileInputStream("testfile.java"));
    } catch (java.io.FileNotFoundException e) {
      System.out.println("JavaCC Parser:  File " + "testfile.java" + " not found.");
      return;
    }
    try {
      parser.javacc_input();
      System.out.println("JavaCC Parser:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("JavaCC Parser:  Encountered errors during parse.");
    }
    
  }

}

PARSER_END(Parser)

/* SKIP (.ignore) */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* TOKENS (TERMINALS) */
TOKEN : 
{
  <CLASS: ["class","Class","CLASS"] >     | <EXTENDS: ["extends","Extends","EXTENDS"] >   | 
  <PUBLIC: ["public","Public","PUBLIC"] > | <STATIC: ["public","Public","PUBLIC"] >       | 
  <VOID: ["void","Void","VOID"] >         | <MAIN: ["main","Main","MAIN"] >               |
  <RETURN: ["return","Return","RETURN"]>  | <NEW: ["new","New","NEW"] >                   |
  <TRUE: ["true","True","TRUE"]           | <FALSE: ["false","False","FALSE"]             |
  <THIS: ["this","This","THIS"]
  |
  <INT: ["int","Int","INT"]               | <BOOLEAN: ["boolean","Boolean","BOOLEAN"] >   |
  <STRING: ["string","String","STRING"]> 
  |
  <LENGTH: ["lenght","Lenght","LENGTH"]>   
  |
  <IF : ["IF","If","IF"] > | <ELSE | ["else","else","ELSE"] >
  |
  <WHILE : ["while","While","WHILE"]>
  |
  <BRACKETS: "[]" >     |
  <LBRACKET: "[" >      | <RBRACKET: "]" >      |
  <LBRACE: "{" >        | <RBRACE: "}" >        | 
  <LPARENTHESIS: "(" >  | <RPARENTHESIS: ")" >  |
  <SEMICOLON: ";" >     | <COMMA: "," >         | 
  <DOT : "." >          | <EXCL: "!" >          
  |
  <ASSIGN : "=">
  |
  <ARITH: "+"|"-">
  |
  <MULTDIV : "*"|"/">
  |
  <LESS: "<">
  |
  <AND : "&&">
  |
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
  |
    < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
  |
    < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
  |
    < #OCTAL_LITERAL: "0" (["0"-"7"])* >
  |
  < IDENT: <LETTER> (<LETTER>|<DIGIT>)* >
  |
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* GRAMMAR RULES */
void PROGRAM(): {}
{
  CLASSDEC()
}
void CLASSDEC(): {}
{
  <CLASS> <IDENT> (<EXTENDS> | <IDENT>) <LBRACE> (VARDEC())* ( MAINDEC() | METHODDEC() )* <RBRACE>
}
void VARDEC(): {}
{
  TYPE() <IDENT> <SEMICOLON>
}
void VARDECLIST(): {}
{
  TYPE() <IDENT> (<COMMA> TYPE() <IDENT>)*
}
void MAINDEC(): {}
{
  <PUBLIC> <STATIC> <VOID> <MAIN> <LPARENTHESIS> <STRING> <BRACKETS> <IDENT> <RPARENTHESIS> <LBRACE>
  (VARDEC())* (STATEMENT())* <RBRACE>
}
void METHODDEC(): {}
{
  <PUBLIC> TYPE() <IDENT> <LPARENTHESIS> (VARDECLIST())? <RPARENTHESIS> <LBRACE>
  (VARDEC())* (STATEMENT())* <RETURN> EXPRESSION() <SEMICOLON> <RBRACE>
}
void TYPE(): {}
{
  ( ( <INT> ( <BRACKETS> )? ) | <BOOLEAN> | <IDENT> )
}
void STATEMENT(): {}
{
  (  (<LBRACE> (STATEMENT())* <RBRACE>)
  | (<IF> <LPARENTHESIS> EXPRESSION() <RPARENTHESIS> STATEMENT() <ELSE> STATEMENT())
  | (<WHILE> <LPARENTHESIS> EXPRESSION() <RPARENTHESIS> STATEMENT())
  | (EXPRESSION() <SEMICOLON>)
  | (<IDENT> (SINGLE() | ARRAY()))
  )
}
void SINGLE(): {}
{
  <ASSIGN> EXPRESSION() <SEMICOLON>
}
void ARRAY(): {}
{
  <LBRACE> EXPRESSION() <RBRACE> <ASSIGN> EXPRESSION() <SEMICOLON>
}
void EXPRESSION(): {}
{
  EXPRAND()
}
void EXPRAND(): {}
{
  EXPRLESS() (<AND> EXPRLESS())?
}
void EXPRLESS(): {}
{
  EXPRARITH() (<LESS> EXPRARITH())?
}
void EXPRARITH(): {}
{
  EXPRMULTDIV() (<ARITH> EXPRMULTDIV())?
}
void EXPRMULTDIV(): {}
{
  EXPRARRAY() (<MULTDIV> EXPRARRAY())?
}
void EXPRARRAY(): {}
{ 
  EXPRLEN() <LBRACE> EXPRLEN() <RBRACE>
}
void EXPRLEN(): {}
{
  EXPRFUNC() <DOT> <LENGTH>
}
void EXPRFUNC(): {}
{
  EXPRNEW() <DOT> <IDENT> <LPARENTHESIS> (EXPRNEW() ( <COMMA> EXPRNEW() )* )? <RPARENTHESIS>
}
void EXPRNEW(): {}
{
  <NEW> ( EXPRNEWARRAY() | EXPRNWOBJ() )
}
void EXPRNEWARRAY(): {}
{
  <INT> <LBRACKET> EXPRNEG() <RBRACKET>
}
void EXPRNWOBJ(): {}
{
  <IDENT> <LPARENTHESIS> <RPARENTHESIS>
}
void EXPRNEG(): {}
{
  <EXCL> EXPRPARENTHESIS()
}
void EXPRPARENTHESIS(): {}
{
  <LPARENTHESIS> EXPRTERMINALS() <RPARENTHESIS>
}
void EXPRTERMINALS(): {}
{
  ( <INTEGER_LITERAL> | <TRUE> | <FALSE> | <IDENT> | <THIS> )
}

/* COMMENTS */
MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/** Root production. */
void javacc_input() :
{}
{
  /* javacc_options() */
  "PARSER_BEGIN" "(" <IDENT> ")"
  PROGRAM()
  "PARSER_END" "(" <IDENT> ")"
  <EOF>
}