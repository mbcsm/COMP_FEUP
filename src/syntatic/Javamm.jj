/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Javamm.jj */
/*@egen*/options {
 LOOKAHEAD=1;
            
}

PARSER_BEGIN(Javamm)

import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Javamm/*@bgen(jjtree)*/implements JavammTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTJavammState jjtree = new JJTJavammState();

/*@egen*/
    public static void main(String args[]) throws ParseException, FileNotFoundException {
        try
        {
            Javamm javamm = new Javamm(new FileInputStream(args[0]));
            SimpleNode root = javamm.Module();
            root.dump("");
        }

        catch (FileNotFoundException ex)
        {
            // insert code to run when exception occurs
        }
    }
}

PARSER_END(Javamm)

TOKEN: // RESERVED WORDS
{
<NEW: "new">
 | <WHILE: "while">
 | <IF: "if">
 | <ELSE: "else">
 | <THIS: "this">
 | <INT: "int">
 | <TRUE: "true">
 | <FALSE: "false">
 | <CLASS: "class">
 | <PUBLIC: "public">
 | <LENGTH: "length">
 | <RETURN: "return">
 | <BOOLEAN: "boolean">
 | <EXTENDS: "extends">
 | <VOID: "void">
 | <MAIN: "main">
 | <STATIC: "static">
 | <STRINGLIT: "String">
 | <SLASH: "\"">
 | <LPAR: "(">
 | <RPAR: ")">
 | <COMMA: ",">
 | <SEMICOLON: ";">
 | <LBRACE: "{">
 | <RBRACE: "}">
 | <RECTBRACEL: "[">
 | <RECTBRACER: "]">
 | <DOT: ".">
 | <PLUS: "+">
 | <MINUS: "-">
 | <MULT: "*">
 | <DIV: "/">
 | <LESS: "<">
 | <AND : "&&">
 | <ASSIGN : "=">

}

SKIP :
{
" " | "\r" | "\t" | "\n" | <"#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")> | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}

TOKEN:
{   // IDs
 < IDENTIFIER : <LETTER> (<LETTER> | <DIGIT>)* >
 | < #LETTER : ["$","A"-"Z","_","a"-"z"] >
 | < #DIGIT : ["0"-"9"] >
 | < INTEGERLITERAL : "0" | (["1"-"9"] (<DIGIT>)*) >
 | <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

SimpleNode Module() : {/*@bgen(jjtree) Module */
  ASTModule jjtn000 = new ASTModule(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Module */
    try {
/*@egen*/
    ClassDeclaration() <EOF>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration() : {/*@bgen(jjtree) ClassDeclaration */
                           ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    <CLASS>
t1=<IDENTIFIER> { jjtn000.className = t1.image; }
 (<EXTENDS>
 t2=<IDENTIFIER> { jjtn000.extension = t2.image;}
 )?

 <LBRACE> (VarDeclaration())*
 ( <PUBLIC> (MainDeclaration() | MethodDeclaration()) )* <RBRACE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) VarDeclaration */
 try {
/*@egen*/
 Type()

 t1=<IDENTIFIER> { jjtn000.varName = t1.image;}

 <SEMICOLON>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void MainDeclaration() : {/*@bgen(jjtree) MainDeclaration */
                          ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) MainDeclaration */
 try {
/*@egen*/
 <STATIC> <VOID> <MAIN>

 <LPAR> <STRINGLIT> <RECTBRACEL> <RECTBRACER>

 t1=<IDENTIFIER> { jjtn000.args = t1.image;}
  <RPAR>

 <LBRACE> (LOOKAHEAD(2) VarDeclaration())* (Statement())* <RBRACE>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void MethodDeclaration() : {/*@bgen(jjtree) MethodDeclaration */
                            ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) MethodDeclaration */
  try {
/*@egen*/
  Type()
  t1=<IDENTIFIER>
  { jjtn000.methodName = t1.image;}

  <LPAR> MethodArguments() <RPAR>
 <LBRACE> (LOOKAHEAD(2) VarDeclaration())* (Statement())*
  Return() <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MethodArguments() : {/*@bgen(jjtree) MethodArguments */
                          ASTMethodArguments jjtn000 = new ASTMethodArguments(JJTMETHODARGUMENTS);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MethodArguments */
    try {
/*@egen*/
    (
    Type()
    t=<IDENTIFIER>
    { jjtn000.identifier = t.image; }

    (<COMMA> MethodArgumentPiece())*

    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodArgumentPiece() : {/*@bgen(jjtree) MethodArgumentPiece */
                              ASTMethodArgumentPiece jjtn000 = new ASTMethodArgumentPiece(JJTMETHODARGUMENTPIECE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) MethodArgumentPiece */
    try {
/*@egen*/
    Type()

    t1=<IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.name = t1.image;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Return() : {/*@bgen(jjtree) Return */
                 ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Return */
    try {
/*@egen*/
    <RETURN> (LOOKAHEAD(2) t1=<IDENTIFIER>{jjtn000.identifier = t1.image;} | LOOKAHEAD(2) t2=<INTEGERLITERAL>{jjtn000.val = Integer.parseInt(t2.image);} | Expression()) <SEMICOLON>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Type */
 try {
/*@egen*/
 t1 = <INT> {
    jjtn000.type = t1.image;
 }

 (
    t2 = <RECTBRACEL> {
        if(t2.image != null){
            jjtn000.isArray = true;
        }
    }

     <RECTBRACER>

 )?


 | t1 = <BOOLEAN>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {
     jjtn000.type = t1.image;
 }

 | t1 = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
    jjtn000.type = t1.image;
 }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Statement() : {/*@bgen(jjtree) Statement */
                    ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2, t3;}
{/*@bgen(jjtree) Statement */
 try {
/*@egen*/

 StatementBody()
 |
 StatementIf()

 |/*@bgen(jjtree) While */
   {
     ASTWhile jjtn001 = new ASTWhile(JJTWHILE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/ <WHILE>/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/       
    try
    {
        <LPAR> Expression() <RPAR>
    }
    catch(ParseException e)
    {
        error_skip_while(RPAR,RBRACE);
    }

    Statement()

 | LOOKAHEAD(2) FunctionCall()

 | LOOKAHEAD(2) Expression() <SEMICOLON>

 | LOOKAHEAD(2) AttributionHead() (<ASSIGN>/*@bgen(jjtree) #Attribution( 2) */
                                            {
                                              ASTAttribution jjtn002 = new ASTAttribution(JJTATTRIBUTION);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
                                            }
                                            try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte002) {
                                              if (jjtc002) {
                                                jjtree.clearNodeScope(jjtn002);
                                                jjtc002 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte002 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte002;
                                              }
                                              if (jjte002 instanceof ParseException) {
                                                throw (ParseException)jjte002;
                                              }
                                              throw (Error)jjte002;
                                            } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                              }
                                            }
/*@egen*/                 <SEMICOLON> | <RECTBRACEL> Expression() <RECTBRACER> <ASSIGN> Expression() <SEMICOLON>)/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void FunctionCall() : {/*@bgen(jjtree) FunctionCall */
                       ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) FunctionCall */
        try {
/*@egen*/
	t1=<IDENTIFIER> { jjtn000.function = t1.image; }

	(<DOT>
	t2=<IDENTIFIER> {	jjtn000.module = t2.image; })?
	<LPAR> (ArgumentList())? <RPAR>

	 <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void NewArgumentFunctionCall() : {/*@bgen(jjtree) NewArgumentFunctionCall */
                                  ASTNewArgumentFunctionCall jjtn000 = new ASTNewArgumentFunctionCall(JJTNEWARGUMENTFUNCTIONCALL);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) NewArgumentFunctionCall */
        try {
/*@egen*/
	<NEW> t1=<IDENTIFIER>{jjtn000.function = t1.image;} <LPAR> (ArgumentList())? <RPAR>
	<DOT>
	t2=<IDENTIFIER> { jjtn000.module = t2.image; }

	<LPAR> (ArgumentList())? <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArgumentFunctionCall() : {/*@bgen(jjtree) ArgumentFunctionCall */
                               ASTArgumentFunctionCall jjtn000 = new ASTArgumentFunctionCall(JJTARGUMENTFUNCTIONCALL);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) ArgumentFunctionCall */
        try {
/*@egen*/
	t1=<IDENTIFIER> { jjtn000.function = t1.image;}

	(<DOT>
	t2=<IDENTIFIER> {	jjtn000.module = t2.image;}
	)?

	<LPAR> (ArgumentList())? <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArgumentList() : {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
    try {
/*@egen*/
    Argument() ( <COMMA> Argument() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Argument() : {/*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token s;}
{/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    (LOOKAHEAD(2) ArgumentFunctionCall()
    | NewArgumentFunctionCall()
    | s=<IDENTIFIER> (ArgOperation())?/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ {jjtn000.name = s.image; jjtn000.type = "ID";}
    | s=<INTEGERLITERAL> (<MINUS><INTEGERLITERAL>)?/*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                    }
/*@egen*/ {jjtn000.name = s.image; jjtn000.type = "Integer";}
    | s=<STRINGLIT>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.name = s.image; jjtn000.type = "String";})/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArgOperation() : {/*@bgen(jjtree) ArgOperation */
  ASTArgOperation jjtn000 = new ASTArgOperation(JJTARGOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgOperation */
        try {
/*@egen*/
	(<PLUS> | <MINUS> | <MULT> | <DIV>) <INTEGERLITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void StatementBody()      : {}
{
  <LBRACE> (Statement())* <RBRACE>
}

void StatementIf() : {/*@bgen(jjtree) StatementIf */
  ASTStatementIf jjtn000 = new ASTStatementIf(JJTSTATEMENTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StatementIf */
    try {
/*@egen*/
    <IF> <LPAR> Expression() <RPAR> Statement() Else()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Else() : {/*@bgen(jjtree) Else */
  ASTElse jjtn000 = new ASTElse(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Else */
        try {
/*@egen*/
	<ELSE> Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AttributionHead() : {/*@bgen(jjtree) AttributionHead */
                          ASTAttributionHead jjtn000 = new ASTAttributionHead(JJTATTRIBUTIONHEAD);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) AttributionHead */
    try {
/*@egen*/
    t1=<IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.name = t1.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression()  : {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
 try {
/*@egen*/
 LOOKAHEAD(2) Arithm()
 |/*@bgen(jjtree) True */
   {
     ASTTrue jjtn001 = new ASTTrue(JJTTRUE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/ <TRUE>/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/      
 |/*@bgen(jjtree) False */
   {
     ASTFalse jjtn002 = new ASTFalse(JJTFALSE);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/       
 | <NEW> NewDeclarations()
 | ExclamationMark()
 | <LPAR> Expression() <RPAR>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void NewDeclarations() : {/*@bgen(jjtree) NewDeclarations */
                          ASTNewDeclarations jjtn000 = new ASTNewDeclarations(JJTNEWDECLARATIONS);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) NewDeclarations */
    try {
/*@egen*/
    (<INT> <RECTBRACEL> Expression() <RECTBRACER>
  |
    t1=<IDENTIFIER> { jjtn000.name = t1.image;}

    <LPAR> <RPAR> (ExpressionMethod())? )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Arithm() : {/*@bgen(jjtree) Arithm */
                 ASTArithm jjtn000 = new ASTArithm(JJTARITHM);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Arithm */
    try {
/*@egen*/
    ExpressionMult(1) (t2=<PLUS>{jjtn000.operator = t2.image;}/*@bgen(jjtree) #Add( 2) */
                                                               {
                                                                 ASTAdd jjtn001 = new ASTAdd(JJTADD);
                                                                 boolean jjtc001 = true;
                                                                 jjtree.openNodeScope(jjtn001);
                                                               }
                                                               try {
/*@egen*/ ExpressionMult(1)/*@bgen(jjtree)*/
                                                               } catch (Throwable jjte001) {
                                                                 if (jjtc001) {
                                                                   jjtree.clearNodeScope(jjtn001);
                                                                   jjtc001 = false;
                                                                 } else {
                                                                   jjtree.popNode();
                                                                 }
                                                                 if (jjte001 instanceof RuntimeException) {
                                                                   throw (RuntimeException)jjte001;
                                                                 }
                                                                 if (jjte001 instanceof ParseException) {
                                                                   throw (ParseException)jjte001;
                                                                 }
                                                                 throw (Error)jjte001;
                                                               } finally {
                                                                 if (jjtc001) {
                                                                   jjtree.closeNodeScope(jjtn001,  2);
                                                                 }
                                                               }
/*@egen*/         | t1=<MINUS>{jjtn000.operator = t1.image;}/*@bgen(jjtree) #Sub( 2) */
                                                                                                                                    {
                                                                                                                                      ASTSub jjtn002 = new ASTSub(JJTSUB);
                                                                                                                                      boolean jjtc002 = true;
                                                                                                                                      jjtree.openNodeScope(jjtn002);
                                                                                                                                    }
                                                                                                                                    try {
/*@egen*/ ExpressionMult(1)/*@bgen(jjtree)*/
                                                                                                                                    } catch (Throwable jjte002) {
                                                                                                                                      if (jjtc002) {
                                                                                                                                        jjtree.clearNodeScope(jjtn002);
                                                                                                                                        jjtc002 = false;
                                                                                                                                      } else {
                                                                                                                                        jjtree.popNode();
                                                                                                                                      }
                                                                                                                                      if (jjte002 instanceof RuntimeException) {
                                                                                                                                        throw (RuntimeException)jjte002;
                                                                                                                                      }
                                                                                                                                      if (jjte002 instanceof ParseException) {
                                                                                                                                        throw (ParseException)jjte002;
                                                                                                                                      }
                                                                                                                                      throw (Error)jjte002;
                                                                                                                                    } finally {
                                                                                                                                      if (jjtc002) {
                                                                                                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                                                                                                      }
                                                                                                                                    }
/*@egen*/        )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ExpressionMult(int sign) : {/*@bgen(jjtree) ExpressionMult */
                                 ASTExpressionMult jjtn000 = new ASTExpressionMult(JJTEXPRESSIONMULT);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) ExpressionMult */
    try {
/*@egen*/
    ExpressionCmp(sign) (t1=<MULT>{jjtn000.operator = t1.image;}/*@bgen(jjtree) #Mult( 2) */
                                                                 {
                                                                   ASTMult jjtn001 = new ASTMult(JJTMULT);
                                                                   boolean jjtc001 = true;
                                                                   jjtree.openNodeScope(jjtn001);
                                                                 }
                                                                 try {
/*@egen*/ ExpressionCmp(sign)/*@bgen(jjtree)*/
                                                                 } catch (Throwable jjte001) {
                                                                   if (jjtc001) {
                                                                     jjtree.clearNodeScope(jjtn001);
                                                                     jjtc001 = false;
                                                                   } else {
                                                                     jjtree.popNode();
                                                                   }
                                                                   if (jjte001 instanceof RuntimeException) {
                                                                     throw (RuntimeException)jjte001;
                                                                   }
                                                                   if (jjte001 instanceof ParseException) {
                                                                     throw (ParseException)jjte001;
                                                                   }
                                                                   throw (Error)jjte001;
                                                                 } finally {
                                                                   if (jjtc001) {
                                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                                   }
                                                                 }
/*@egen*/          | t2=<DIV>{jjtn000.operator = t2.image;}/*@bgen(jjtree) #Div( 2) */
                                                                                                                                       {
                                                                                                                                         ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                                                                                                                                         boolean jjtc002 = true;
                                                                                                                                         jjtree.openNodeScope(jjtn002);
                                                                                                                                       }
                                                                                                                                       try {
/*@egen*/ ExpressionCmp(sign)/*@bgen(jjtree)*/
                                                                                                                                       } catch (Throwable jjte002) {
                                                                                                                                         if (jjtc002) {
                                                                                                                                           jjtree.clearNodeScope(jjtn002);
                                                                                                                                           jjtc002 = false;
                                                                                                                                         } else {
                                                                                                                                           jjtree.popNode();
                                                                                                                                         }
                                                                                                                                         if (jjte002 instanceof RuntimeException) {
                                                                                                                                           throw (RuntimeException)jjte002;
                                                                                                                                         }
                                                                                                                                         if (jjte002 instanceof ParseException) {
                                                                                                                                           throw (ParseException)jjte002;
                                                                                                                                         }
                                                                                                                                         throw (Error)jjte002;
                                                                                                                                       } finally {
                                                                                                                                         if (jjtc002) {
                                                                                                                                           jjtree.closeNodeScope(jjtn002,  2);
                                                                                                                                         }
                                                                                                                                       }
/*@egen*/        )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ExpressionCmp(int sign) : {/*@bgen(jjtree) ExpressionCmp */
                                ASTExpressionCmp jjtn000 = new ASTExpressionCmp(JJTEXPRESSIONCMP);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) ExpressionCmp */
    try {
/*@egen*/
    Term(sign) (t1=<LESS>{jjtn000.operator = t1.image;}/*@bgen(jjtree) #Less( 2) */
                                                        {
                                                          ASTLess jjtn001 = new ASTLess(JJTLESS);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                        }
                                                        try {
/*@egen*/ Term(sign)/*@bgen(jjtree)*/
                                                        } catch (Throwable jjte001) {
                                                          if (jjtc001) {
                                                            jjtree.clearNodeScope(jjtn001);
                                                            jjtc001 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte001 instanceof RuntimeException) {
                                                            throw (RuntimeException)jjte001;
                                                          }
                                                          if (jjte001 instanceof ParseException) {
                                                            throw (ParseException)jjte001;
                                                          }
                                                          throw (Error)jjte001;
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001,  2);
                                                          }
                                                        }
/*@egen*/          | t2=<AND>{jjtn000.operator = t2.image;}/*@bgen(jjtree) #And( 2) */
                                                                                                                     {
                                                                                                                       ASTAnd jjtn002 = new ASTAnd(JJTAND);
                                                                                                                       boolean jjtc002 = true;
                                                                                                                       jjtree.openNodeScope(jjtn002);
                                                                                                                     }
                                                                                                                     try {
/*@egen*/ Term(sign)/*@bgen(jjtree)*/
                                                                                                                     } catch (Throwable jjte002) {
                                                                                                                       if (jjtc002) {
                                                                                                                         jjtree.clearNodeScope(jjtn002);
                                                                                                                         jjtc002 = false;
                                                                                                                       } else {
                                                                                                                         jjtree.popNode();
                                                                                                                       }
                                                                                                                       if (jjte002 instanceof RuntimeException) {
                                                                                                                         throw (RuntimeException)jjte002;
                                                                                                                       }
                                                                                                                       if (jjte002 instanceof ParseException) {
                                                                                                                         throw (ParseException)jjte002;
                                                                                                                       }
                                                                                                                       throw (Error)jjte002;
                                                                                                                     } finally {
                                                                                                                       if (jjtc002) {
                                                                                                                         jjtree.closeNodeScope(jjtn002,  2);
                                                                                                                       }
                                                                                                                     }
/*@egen*/        )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Term(int sign) : {/*@bgen(jjtree) Term */
                       ASTTerm jjtn000 = new ASTTerm(JJTTERM);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Term */
 try {
/*@egen*/

 (t=<INTEGERLITERAL>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
  jjtn000.val = sign * Integer.parseInt(t.image);
 }
 |
 t=<IDENTIFIER>
 {

    jjtn000.identifier = new String(t.image);
    if(t.next != null){
        if((t.next).image == "<RECTBRACEL>"){
            ExpressionArray();
        }
    }

 }
 (ExpressionMethod())? | ThisCall()
 )

 | <MINUS> Term(-1)
 | ParenthesisArithm()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void ThisCall() :  {/*@bgen(jjtree) ThisCall */
                    ASTThisCall jjtn000 = new ASTThisCall(JJTTHISCALL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) ThisCall */
         try {
/*@egen*/

	 <THIS> <DOT>
	 t1 = <IDENTIFIER> { jjtn000.module = t1.image; }

	 (
		ThisFunctionCall()
	 )?/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/

}

void ThisFunctionCall() : {/*@bgen(jjtree) ThisFunctionCall */
  ASTThisFunctionCall jjtn000 = new ASTThisFunctionCall(JJTTHISFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThisFunctionCall */
        try {
/*@egen*/
	<LPAR> (ArgumentList())? <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ParenthesisArithm() : {/*@bgen(jjtree) ParenthesisArithm */
  ASTParenthesisArithm jjtn000 = new ASTParenthesisArithm(JJTPARENTHESISARITHM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParenthesisArithm */
        try {
/*@egen*/
	<LPAR> Arithm() <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExclamationMark() : {/*@bgen(jjtree) ExclamationMark */
  ASTExclamationMark jjtn000 = new ASTExclamationMark(JJTEXCLAMATIONMARK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExclamationMark */
        try {
/*@egen*/
	"!" Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExpressionArray() : {/*@bgen(jjtree) ExpressionArray */
  ASTExpressionArray jjtn000 = new ASTExpressionArray(JJTEXPRESSIONARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionArray */
    try {
/*@egen*/
    <RECTBRACEL> Arithm() <RECTBRACER>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ExpressionMethod() : {/*@bgen(jjtree) ExpressionMethod */
  ASTExpressionMethod jjtn000 = new ASTExpressionMethod(JJTEXPRESSIONMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionMethod */
    try {
/*@egen*/
    <DOT> Methods()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Methods() : {/*@bgen(jjtree) Methods */
                  ASTMethods jjtn000 = new ASTMethods(JJTMETHODS);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Methods */
    try {
/*@egen*/
    (
    t1 = <LENGTH>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.module = t1.image; }
    |
    t2=<IDENTIFIER> { jjtn000.module = t2.image; }

    ( <LPAR> (ArgumentList())? <RPAR> )?

    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

JAVACODE
void error_skip_while(int kind1, int kind2) {/*@bgen(jjtree) error_skip_while */
 ASTerror_skip_while jjtn000 = new ASTerror_skip_while(JJTERROR_SKIP_WHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/
    boolean brace= false;
    ParseException e = generateParseException();
    System.out.println(e.toString());
    Token t;
    do {
        t = getNextToken();
        if(t.kind==LBRACE)
            brace=true;
        if (t.kind==SEMICOLON && brace==false)
            break;
    } while (t.kind != kind1 && t.kind != kind2);/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

JAVACODE
void error_skipto(int kind) {/*@bgen(jjtree) error_skipto */
 ASTerror_skipto jjtn000 = new ASTerror_skipto(JJTERROR_SKIPTO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/
    ParseException e = generateParseException();
    System.out.println(e.toString());
    Token t;
    do {
        t = getNextToken();
    } while (t.kind != kind);/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}