import java.util.HashMap;

/* Generated By:JJTree: Do not edit this line. ASTTerm.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTTerm extends SimpleNode {

  public String identifier = "";
  public Integer val = null;

  public ASTTerm(int id) {
    super(id);
  }

  public ASTTerm(Javamm p, int id) {
    super(p, id);
  }

  public String toString() {
    if (identifier != "") {
      return identifier;
    }

    if (val != null) {
      return "" + val;
    } else
      return "Term";
  }

  @Override
  public String getType() throws SemanticException {
    if (val != null && identifier == "")
      return "int";
    if (val == null && identifier == "")
      return "";

    for (String key : SymbolTable.localVariables.keySet()) {
      HashMap<String, Symbol> templocalVariablesTable = SymbolTable.localVariables.get(key);
      for (String _key : templocalVariablesTable.keySet()) {
        if (templocalVariablesTable.get(identifier) == null)
          break;
        if (templocalVariablesTable.get(identifier).name.equals(identifier)) {
          return templocalVariablesTable.get(identifier).getType();
        }
      }
    }

    for (String _key : SymbolTable.classVariables.keySet()) {
      if (SymbolTable.classVariables.get(identifier) == null)
        break;
      if (SymbolTable.classVariables.get(identifier).name.equals(identifier)) {
        return SymbolTable.classVariables.get(identifier).getType();
      }
    }

    for (String key : SymbolTable.parameters.keySet()) {
      HashMap<String, Symbol> tempparametersTable = SymbolTable.parameters.get(key);
      for (String _key : tempparametersTable.keySet()) {
        if (tempparametersTable.get(identifier) == null)
          break;
        if (tempparametersTable.get(identifier).name.equals(identifier)) {
          return tempparametersTable.get(identifier).getType();
        }
      }
    }
    throw new SemanticException("Variable <" + identifier + "> not defined.");
  }

}
/*
 * JavaCC - OriginalChecksum=e495ea5ac93e5c698aaa71441f17dfa3 (do not edit this
 * line)
 */
