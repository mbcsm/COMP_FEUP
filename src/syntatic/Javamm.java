
/* Javamm.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Javamm.java */
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Javamm/* @bgen(jjtree) */ implements JavammTreeConstants, JavammConstants {/* @bgen(jjtree) */
  protected static JJTJavammState jjtree = new JJTJavammState();

  public static void main(String args[]) throws ParseException, FileNotFoundException {
    try {
      Javamm javamm = new Javamm(new FileInputStream(args[0]));
      SimpleNode root = javamm.Module();
      root.dump("");
    }

    catch (FileNotFoundException ex) {
      ex.printStackTrace();
    } catch (ParseException e) {
      e.printStackTrace();
    }
  }

  static final public SimpleNode Module() throws ParseException {/* @bgen(jjtree) Module */
    ASTModule jjtn000 = new ASTModule(JJTMODULE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      ClassDeclaration();
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {
        if ("" != null)
          return jjtn000;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ClassDeclaration() throws ParseException {/* @bgen(jjtree) ClassDeclaration */
    ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1, t2;
    try {
      jj_consume_token(CLASS);
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.className = t1.image;
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case EXTENDS: {
        jj_consume_token(EXTENDS);
        t2 = jj_consume_token(IDENTIFIER);
        jjtn000.extension = t2.image;
        break;
      }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_1: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER: {
          ;
          break;
        }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        VarDeclaration();
      }
      label_2: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case PUBLIC: {
          ;
          break;
        }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(PUBLIC);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case STATIC: {
          MainDeclaration();
          break;
        }
        case INT:
        case BOOLEAN:
        case IDENTIFIER: {
          MethodDeclaration();
          break;
        }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void VarDeclaration() throws ParseException {/* @bgen(jjtree) VarDeclaration */
    ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1;
    try {
      Type();
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.varName = t1.image;
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MainDeclaration() throws ParseException {/* @bgen(jjtree) MainDeclaration */
    ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1;
    try {
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LPAR);
      jj_consume_token(STRINGLIT);
      jj_consume_token(RECTBRACEL);
      jj_consume_token(RECTBRACER);
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.args = t1.image;
      jj_consume_token(RPAR);
      jj_consume_token(LBRACE);
      label_3: while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_3;
        }
        VarDeclaration();
      }
      label_4: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case NEW:
        case WHILE:
        case IF:
        case THIS:
        case TRUE:
        case FALSE:
        case LPAR:
        case LBRACE:
        case MINUS:
        case IDENTIFIER:
        case INTEGERLITERAL:
        case 47: {
          ;
          break;
        }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        Statement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MethodDeclaration() throws ParseException {/* @bgen(jjtree) MethodDeclaration */
    ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1;
    try {
      Type();
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.methodName = t1.image;
      jj_consume_token(LPAR);
      MethodArguments();
      jj_consume_token(RPAR);
      jj_consume_token(LBRACE);
      label_5: while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_5;
        }
        VarDeclaration();
      }
      label_6: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case NEW:
        case WHILE:
        case IF:
        case THIS:
        case TRUE:
        case FALSE:
        case LPAR:
        case LBRACE:
        case MINUS:
        case IDENTIFIER:
        case INTEGERLITERAL:
        case 47: {
          ;
          break;
        }
        default:
          jj_la1[5] = jj_gen;
          break label_6;
        }
        Statement();
      }
      Return();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MethodArguments() throws ParseException {/* @bgen(jjtree) MethodArguments */
    ASTMethodArguments jjtn000 = new ASTMethodArguments(JJTMETHODARGUMENTS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER: {
        Type();
        t = jj_consume_token(IDENTIFIER);
        jjtn000.identifier = t.image;
        label_7: while (true) {
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case COMMA: {
            ;
            break;
          }
          default:
            jj_la1[6] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          MethodArgumentPiece();
        }
        break;
      }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MethodArgumentPiece() throws ParseException {/* @bgen(jjtree) MethodArgumentPiece */
    ASTMethodArgumentPiece jjtn000 = new ASTMethodArgumentPiece(JJTMETHODARGUMENTPIECE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1;
    try {
      Type();
      t1 = jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.name = t1.image;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Return() throws ParseException {/* @bgen(jjtree) Return */
    ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1, t2;
    try {
      jj_consume_token(RETURN);
      if (jj_2_3(2)) {
        t1 = jj_consume_token(IDENTIFIER);
        jjtn000.identifier = t1.image;
      } else if (jj_2_4(2)) {
        t2 = jj_consume_token(INTEGERLITERAL);
        jjtn000.val = Integer.parseInt(t2.image);
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case NEW:
        case THIS:
        case TRUE:
        case FALSE:
        case LPAR:
        case MINUS:
        case IDENTIFIER:
        case INTEGERLITERAL:
        case 47: {
          Expression();
          break;
        }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Type() throws ParseException {/* @bgen(jjtree) Type */
    ASTType jjtn000 = new ASTType(JJTTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1, t2;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case INT: {
        t1 = jj_consume_token(INT);
        jjtn000.type = t1.image;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case RECTBRACEL: {
          t2 = jj_consume_token(RECTBRACEL);
          if (t2.image != null) {
            jjtn000.isArray = true;
          }
          jj_consume_token(RECTBRACER);
          break;
        }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        break;
      }
      case BOOLEAN: {
        t1 = jj_consume_token(BOOLEAN);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.type = t1.image;
        break;
      }
      case IDENTIFIER: {
        t1 = jj_consume_token(IDENTIFIER);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.type = t1.image;
        break;
      }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Statement() throws ParseException {/* @bgen(jjtree) Statement */
    ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1, t2, t3;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case LBRACE: {
        StatementBody();
        break;
      }
      case IF: {
        StatementIf();
        break;
      }
      case WHILE: {
        ASTWhile jjtn001 = new ASTWhile(JJTWHILE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(WHILE);
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
        try {
          jj_consume_token(LPAR);
          Expression();
          jj_consume_token(RPAR);
        } catch (ParseException e) {
          error_skip_while(RPAR, RBRACE);
        }
        Statement();
        break;
      }
      default:
        jj_la1[12] = jj_gen;
        if (jj_2_5(2)) {
          FunctionCall();
        } else if (jj_2_6(2)) {
          Expression();
          jj_consume_token(SEMICOLON);
        } else if (jj_2_7(2)) {
          AttributionHead();
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case ASSIGN: {
            jj_consume_token(ASSIGN);
            ASTAttribution jjtn002 = new ASTAttribution(JJTATTRIBUTION);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            try {
              Expression();
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                {
                  if (true)
                    throw (RuntimeException) jjte002;
                }
              }
              if (jjte002 instanceof ParseException) {
                {
                  if (true)
                    throw (ParseException) jjte002;
                }
              }
              {
                if (true)
                  throw (Error) jjte002;
              }
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, 2);
              }
            }
            jj_consume_token(SEMICOLON);
            break;
          }
          case RECTBRACEL: {
            jj_consume_token(RECTBRACEL);
            Expression();
            jj_consume_token(RECTBRACER);
            jj_consume_token(ASSIGN);
            Expression();
            jj_consume_token(SEMICOLON);
            break;
          }
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void FunctionCall() throws ParseException {/* @bgen(jjtree) FunctionCall */
    ASTFunctionCall jjtn000 = new ASTFunctionCall(JJTFUNCTIONCALL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1, t2;
    try {
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.function = t1.image;
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case DOT: {
        jj_consume_token(DOT);
        t2 = jj_consume_token(IDENTIFIER);
        jjtn000.module = t2.image;
        break;
      }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(LPAR);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case NEW:
      case STRINGLIT:
      case IDENTIFIER:
      case INTEGERLITERAL: {
        ArgumentList();
        break;
      }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void NewArgumentFunctionCall() throws ParseException {/* @bgen(jjtree) NewArgumentFunctionCall */
    ASTNewArgumentFunctionCall jjtn000 = new ASTNewArgumentFunctionCall(JJTNEWARGUMENTFUNCTIONCALL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1, t2;
    try {
      jj_consume_token(NEW);
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.function = t1.image;
      jj_consume_token(LPAR);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case NEW:
      case STRINGLIT:
      case IDENTIFIER:
      case INTEGERLITERAL: {
        ArgumentList();
        break;
      }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      jj_consume_token(DOT);
      t2 = jj_consume_token(IDENTIFIER);
      jjtn000.module = t2.image;
      jj_consume_token(LPAR);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case NEW:
      case STRINGLIT:
      case IDENTIFIER:
      case INTEGERLITERAL: {
        ArgumentList();
        break;
      }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ArgumentFunctionCall() throws ParseException {/* @bgen(jjtree) ArgumentFunctionCall */
    ASTArgumentFunctionCall jjtn000 = new ASTArgumentFunctionCall(JJTARGUMENTFUNCTIONCALL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1, t2;
    try {
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.function = t1.image;
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case DOT: {
        jj_consume_token(DOT);
        t2 = jj_consume_token(IDENTIFIER);
        jjtn000.module = t2.image;
        break;
      }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(LPAR);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case NEW:
      case STRINGLIT:
      case IDENTIFIER:
      case INTEGERLITERAL: {
        ArgumentList();
        break;
      }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ArgumentList() throws ParseException {/* @bgen(jjtree) ArgumentList */
    ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      Argument();
      label_8: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case COMMA: {
          ;
          break;
        }
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        Argument();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Argument() throws ParseException {/* @bgen(jjtree) Argument */
    ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token s;
    try {
      if (jj_2_8(2)) {
        ArgumentFunctionCall();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case NEW: {
          NewArgumentFunctionCall();
          break;
        }
        case IDENTIFIER: {
          s = jj_consume_token(IDENTIFIER);
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case PLUS:
          case MINUS:
          case MULT:
          case DIV: {
            ArgOperation();
            break;
          }
          default:
            jj_la1[20] = jj_gen;
            ;
          }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.name = s.image;
          jjtn000.type = "ID";
          break;
        }
        case INTEGERLITERAL: {
          s = jj_consume_token(INTEGERLITERAL);
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case MINUS: {
            jj_consume_token(MINUS);
            jj_consume_token(INTEGERLITERAL);
            break;
          }
          default:
            jj_la1[21] = jj_gen;
            ;
          }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.name = s.image;
          jjtn000.type = "Integer";
          break;
        }
        case STRINGLIT: {
          s = jj_consume_token(STRINGLIT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.name = s.image;
          jjtn000.type = "String";
          break;
        }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ArgOperation() throws ParseException {/* @bgen(jjtree) ArgOperation */
    ASTArgOperation jjtn000 = new ASTArgOperation(JJTARGOPERATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case PLUS: {
        jj_consume_token(PLUS);
        break;
      }
      case MINUS: {
        jj_consume_token(MINUS);
        break;
      }
      case MULT: {
        jj_consume_token(MULT);
        break;
      }
      case DIV: {
        jj_consume_token(DIV);
        break;
      }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(INTEGERLITERAL);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void StatementBody() throws ParseException {
    jj_consume_token(LBRACE);
    label_9: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case NEW:
      case WHILE:
      case IF:
      case THIS:
      case TRUE:
      case FALSE:
      case LPAR:
      case LBRACE:
      case MINUS:
      case IDENTIFIER:
      case INTEGERLITERAL:
      case 47: {
        ;
        break;
      }
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
      Statement();
    }
    jj_consume_token(RBRACE);
  }

  static final public void StatementIf() throws ParseException {/* @bgen(jjtree) StatementIf */
    ASTStatementIf jjtn000 = new ASTStatementIf(JJTSTATEMENTIF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAR);
      Expression();
      jj_consume_token(RPAR);
      Statement();
      Else();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Else() throws ParseException {/* @bgen(jjtree) Else */
    ASTElse jjtn000 = new ASTElse(JJTELSE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
      Statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void AttributionHead() throws ParseException {/* @bgen(jjtree) AttributionHead */
    ASTAttributionHead jjtn000 = new ASTAttributionHead(JJTATTRIBUTIONHEAD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1;
    try {
      t1 = jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.name = t1.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Expression() throws ParseException {/* @bgen(jjtree) Expression */
    ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_9(2)) {
        Arithm();
      } else {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case TRUE: {
          ASTTrue jjtn001 = new ASTTrue(JJTTRUE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(TRUE);
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
          break;
        }
        case FALSE: {
          ASTFalse jjtn002 = new ASTFalse(JJTFALSE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(FALSE);
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
          break;
        }
        case NEW: {
          jj_consume_token(NEW);
          NewDeclarations();
          break;
        }
        case 47: {
          ExclamationMark();
          break;
        }
        case LPAR: {
          jj_consume_token(LPAR);
          Expression();
          jj_consume_token(RPAR);
          break;
        }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void NewDeclarations() throws ParseException {/* @bgen(jjtree) NewDeclarations */
    ASTNewDeclarations jjtn000 = new ASTNewDeclarations(JJTNEWDECLARATIONS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case INT: {
        jj_consume_token(INT);
        jj_consume_token(RECTBRACEL);
        Expression();
        jj_consume_token(RECTBRACER);
        break;
      }
      case IDENTIFIER: {
        t1 = jj_consume_token(IDENTIFIER);
        jjtn000.name = t1.image;
        jj_consume_token(LPAR);
        jj_consume_token(RPAR);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case DOT: {
          ExpressionMethod();
          break;
        }
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        break;
      }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Arithm() throws ParseException {/* @bgen(jjtree) Arithm */
    ASTArithm jjtn000 = new ASTArithm(JJTARITHM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1, t2;
    try {
      ExpressionMult(1);
      label_10: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case PLUS:
        case MINUS: {
          ;
          break;
        }
        default:
          jj_la1[28] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case PLUS: {
          t2 = jj_consume_token(PLUS);
          jjtn000.operator = t2.image;
          ASTAdd jjtn001 = new ASTAdd(JJTADD);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          try {
            ExpressionMult(1);
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {
                if (true)
                  throw (RuntimeException) jjte001;
              }
            }
            if (jjte001 instanceof ParseException) {
              {
                if (true)
                  throw (ParseException) jjte001;
              }
            }
            {
              if (true)
                throw (Error) jjte001;
            }
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, 2);
            }
          }
          break;
        }
        case MINUS: {
          t1 = jj_consume_token(MINUS);
          jjtn000.operator = t1.image;
          ASTSub jjtn002 = new ASTSub(JJTSUB);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          try {
            ExpressionMult(1);
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {
                if (true)
                  throw (RuntimeException) jjte002;
              }
            }
            if (jjte002 instanceof ParseException) {
              {
                if (true)
                  throw (ParseException) jjte002;
              }
            }
            {
              if (true)
                throw (Error) jjte002;
            }
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, 2);
            }
          }
          break;
        }
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionMult(int sign) throws ParseException {/* @bgen(jjtree) ExpressionMult */
    ASTExpressionMult jjtn000 = new ASTExpressionMult(JJTEXPRESSIONMULT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1, t2;
    try {
      ExpressionCmp(sign);
      label_11: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case MULT:
        case DIV: {
          ;
          break;
        }
        default:
          jj_la1[30] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case MULT: {
          t1 = jj_consume_token(MULT);
          jjtn000.operator = t1.image;
          ASTMult jjtn001 = new ASTMult(JJTMULT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          try {
            ExpressionCmp(sign);
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {
                if (true)
                  throw (RuntimeException) jjte001;
              }
            }
            if (jjte001 instanceof ParseException) {
              {
                if (true)
                  throw (ParseException) jjte001;
              }
            }
            {
              if (true)
                throw (Error) jjte001;
            }
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, 2);
            }
          }
          break;
        }
        case DIV: {
          t2 = jj_consume_token(DIV);
          jjtn000.operator = t2.image;
          ASTDiv jjtn002 = new ASTDiv(JJTDIV);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          try {
            ExpressionCmp(sign);
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {
                if (true)
                  throw (RuntimeException) jjte002;
              }
            }
            if (jjte002 instanceof ParseException) {
              {
                if (true)
                  throw (ParseException) jjte002;
              }
            }
            {
              if (true)
                throw (Error) jjte002;
            }
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, 2);
            }
          }
          break;
        }
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionCmp(int sign) throws ParseException {/* @bgen(jjtree) ExpressionCmp */
    ASTExpressionCmp jjtn000 = new ASTExpressionCmp(JJTEXPRESSIONCMP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1, t2;
    try {
      Term(sign);
      label_12: while (true) {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LESS:
        case AND: {
          ;
          break;
        }
        default:
          jj_la1[32] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LESS: {
          t1 = jj_consume_token(LESS);
          jjtn000.operator = t1.image;
          ASTLess jjtn001 = new ASTLess(JJTLESS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          try {
            Term(sign);
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {
                if (true)
                  throw (RuntimeException) jjte001;
              }
            }
            if (jjte001 instanceof ParseException) {
              {
                if (true)
                  throw (ParseException) jjte001;
              }
            }
            {
              if (true)
                throw (Error) jjte001;
            }
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, 2);
            }
          }
          break;
        }
        case AND: {
          t2 = jj_consume_token(AND);
          jjtn000.operator = t2.image;
          ASTAnd jjtn002 = new ASTAnd(JJTAND);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          try {
            Term(sign);
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {
                if (true)
                  throw (RuntimeException) jjte002;
              }
            }
            if (jjte002 instanceof ParseException) {
              {
                if (true)
                  throw (ParseException) jjte002;
              }
            }
            {
              if (true)
                throw (Error) jjte002;
            }
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, 2);
            }
          }
          break;
        }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Term(int sign) throws ParseException {/* @bgen(jjtree) Term */
    ASTTerm jjtn000 = new ASTTerm(JJTTERM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case THIS:
      case IDENTIFIER:
      case INTEGERLITERAL: {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case INTEGERLITERAL: {
          t = jj_consume_token(INTEGERLITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.val = sign * Integer.parseInt(t.image);
          break;
        }
        case IDENTIFIER: {
          t = jj_consume_token(IDENTIFIER);
          jjtn000.identifier = new String(t.image);
          if (t.next != null) {
            if ((t.next).image == "<RECTBRACEL>") {
              ExpressionArray();
            }
          }
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case DOT: {
            ExpressionMethod();
            break;
          }
          default:
            jj_la1[34] = jj_gen;
            ;
          }
          break;
        }
        case THIS: {
          ThisCall();
          break;
        }
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      }
      case MINUS: {
        jj_consume_token(MINUS);
        Term(-1);
        break;
      }
      case LPAR: {
        ParenthesisArithm();
        break;
      }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ThisCall() throws ParseException {/* @bgen(jjtree) ThisCall */
    ASTThisCall jjtn000 = new ASTThisCall(JJTTHISCALL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1;
    try {
      jj_consume_token(THIS);
      jj_consume_token(DOT);
      t1 = jj_consume_token(IDENTIFIER);
      jjtn000.module = t1.image;
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case LPAR: {
        ThisFunctionCall();
        break;
      }
      default:
        jj_la1[37] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ThisFunctionCall() throws ParseException {/* @bgen(jjtree) ThisFunctionCall */
    ASTThisFunctionCall jjtn000 = new ASTThisFunctionCall(JJTTHISFUNCTIONCALL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case NEW:
      case STRINGLIT:
      case IDENTIFIER:
      case INTEGERLITERAL: {
        ArgumentList();
        break;
      }
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ParenthesisArithm() throws ParseException {/* @bgen(jjtree) ParenthesisArithm */
    ASTParenthesisArithm jjtn000 = new ASTParenthesisArithm(JJTPARENTHESISARITHM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAR);
      Arithm();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExclamationMark() throws ParseException {/* @bgen(jjtree) ExclamationMark */
    ASTExclamationMark jjtn000 = new ASTExclamationMark(JJTEXCLAMATIONMARK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(47);
      Expression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionArray() throws ParseException {/* @bgen(jjtree) ExpressionArray */
    ASTExpressionArray jjtn000 = new ASTExpressionArray(JJTEXPRESSIONARRAY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RECTBRACEL);
      Arithm();
      jj_consume_token(RECTBRACER);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ExpressionMethod() throws ParseException {/* @bgen(jjtree) ExpressionMethod */
    ASTExpressionMethod jjtn000 = new ASTExpressionMethod(JJTEXPRESSIONMETHOD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOT);
      Methods();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Methods() throws ParseException {/* @bgen(jjtree) Methods */
    ASTMethods jjtn000 = new ASTMethods(JJTMETHODS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    Token t1, t2;
    try {
      switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
      case LENGTH: {
        t1 = jj_consume_token(LENGTH);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.module = t1.image;
        break;
      }
      case IDENTIFIER: {
        t2 = jj_consume_token(IDENTIFIER);
        jjtn000.module = t2.image;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
        case LPAR: {
          jj_consume_token(LPAR);
          switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
          case NEW:
          case STRINGLIT:
          case IDENTIFIER:
          case INTEGERLITERAL: {
            ArgumentList();
            break;
          }
          default:
            jj_la1[39] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
          break;
        }
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        break;
      }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {
          if (true)
            throw (RuntimeException) jjte000;
        }
      }
      if (jjte000 instanceof ParseException) {
        {
          if (true)
            throw (ParseException) jjte000;
        }
      }
      {
        if (true)
          throw (Error) jjte000;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static void error_skipto(int kind) throws ParseException {/* @bgen(jjtree) error_skipto */
    ASTerror_skipto jjtn000 = new ASTerror_skipto(JJTERROR_SKIPTO);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      ParseException e = generateParseException();
      System.out.println(e.toString());
      Token t;
      do {
        t = getNextToken();
      } while (t.kind != kind);/* @bgen(jjtree) */
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static void error_skip_while(int kind1, int kind2) throws ParseException {/* @bgen(jjtree) error_skip_while */
    ASTerror_skip_while jjtn000 = new ASTerror_skip_while(JJTERROR_SKIP_WHILE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    try {
      boolean brace = false;
      ParseException e = generateParseException();
      System.out.println(e.toString());
      Token t;
      do {
        t = getNextToken();
        if (t.kind == LBRACE)
          brace = true;
        if (t.kind == SEMICOLON && brace == false)
          break;
      } while (t.kind != kind1 && t.kind != kind2);/* @bgen(jjtree) */
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_1());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(0, xla);
    }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_2());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(1, xla);
    }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_3());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(2, xla);
    }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_4());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(3, xla);
    }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_5());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(4, xla);
    }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_6());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(5, xla);
    }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_7());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(6, xla);
    }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_8());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(7, xla);
    }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla;
    jj_lastpos = jj_scanpos = token;
    try {
      return (!jj_3_9());
    } catch (LookaheadSuccess ls) {
      return true;
    } finally {
      jj_save(8, xla);
    }
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(INTEGERLITERAL))
      return true;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
      jj_scanpos = xsp;
      if (jj_3R_53()) {
        jj_scanpos = xsp;
        if (jj_3R_54())
          return true;
      }
    }
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
      jj_scanpos = xsp;
      if (jj_3R_32()) {
        jj_scanpos = xsp;
        if (jj_3R_33())
          return true;
      }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(INT))
      return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40())
      jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(IDENTIFIER))
      return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28())
      jj_scanpos = xsp;
    if (jj_scan_token(LPAR))
      return true;
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
      jj_scanpos = xsp;
      if (jj_3R_48()) {
        jj_scanpos = xsp;
        if (jj_3R_49())
          return true;
      }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_43())
      return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_36())
      return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(DIV))
      return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(ASSIGN))
      return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_29())
      return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) {
        jj_scanpos = xsp;
        break;
      }
    }
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(MINUS))
      return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(AND))
      return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(IDENTIFIER))
      return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(INTEGERLITERAL))
      return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(DOT))
      return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(INT))
      return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_13())
      return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(DOT))
      return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
      jj_scanpos = xsp;
      if (jj_3R_42())
        return true;
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFIER))
      return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22())
      jj_scanpos = xsp;
    if (jj_scan_token(LPAR))
      return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(47))
      return true;
    if (jj_3R_15())
      return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(LPAR))
      return true;
    if (jj_3R_15())
      return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_35())
      return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(FALSE))
      return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(NEW))
      return true;
    if (jj_3R_34())
      return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(TRUE))
      return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(LPAR))
      return true;
    if (jj_3R_20())
      return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_13())
      return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
      jj_scanpos = xsp;
      if (jj_3R_23()) {
        jj_scanpos = xsp;
        if (jj_3R_24()) {
          jj_scanpos = xsp;
          if (jj_3R_25()) {
            jj_scanpos = xsp;
            if (jj_3R_26()) {
              jj_scanpos = xsp;
              if (jj_3R_27())
                return true;
            }
          }
        }
      }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_20())
      return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_16())
      return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
      jj_scanpos = xsp;
      if (jj_3R_18())
        return true;
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_15())
      return true;
    if (jj_scan_token(SEMICOLON))
      return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIER))
      return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_14())
      return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(RECTBRACEL))
      return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(THIS))
      return true;
    if (jj_scan_token(DOT))
      return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_55())
      return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(MINUS))
      return true;
    if (jj_3R_43())
      return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_21())
      return true;
    if (jj_scan_token(IDENTIFIER))
      return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_57())
      return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(IDENTIFIER))
      return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_19())
      return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_58())
      return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(BOOLEAN))
      return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(MULT))
      return true;
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
      jj_scanpos = xsp;
      if (jj_3R_46())
        return true;
    }
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(LESS))
      return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
      jj_scanpos = xsp;
      if (jj_3R_51())
        return true;
    }
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(RECTBRACEL))
      return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER))
      return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFIER))
      return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56())
      jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(DOT))
      return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
      jj_scanpos = xsp;
      if (jj_3R_39())
        return true;
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(PLUS))
      return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavammTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
    jj_la1_init_0();
    jj_la1_init_1();
  }

  private static void jj_la1_init_0() {
    jj_la1_0 = new int[] { 0x4000, 0x2040, 0x400, 0x22040, 0x411001ae, 0x411001ae, 0x400000, 0x2040, 0x401001a2,
        0x4000000, 0x2040, 0x4000000, 0x100000c, 0x10000000, 0x40002, 0x40002, 0x40002, 0x10000000, 0x40002, 0x400000,
        0xe0000000, 0x40000000, 0x40002, 0xe0000000, 0x411001ae, 0x100182, 0x10000000, 0x40, 0x60000000, 0x60000000,
        0x80000000, 0x80000000, 0x0, 0x0, 0x10000000, 0x20, 0x40100020, 0x100000, 0x40002, 0x40002, 0x100000, 0x800, };
  }

  private static void jj_la1_init_1() {
    jj_la1_1 = new int[] { 0x0, 0x400, 0x0, 0x400, 0xa400, 0xa400, 0x0, 0x400, 0xa400, 0x0, 0x400, 0x8, 0x0, 0x0,
        0x2400, 0x2400, 0x2400, 0x0, 0x2400, 0x0, 0x1, 0x0, 0x2400, 0x1, 0xa400, 0x8000, 0x0, 0x400, 0x0, 0x0, 0x1, 0x1,
        0x6, 0x6, 0x0, 0x2400, 0x2400, 0x0, 0x2400, 0x2400, 0x0, 0x400, };
  }

  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Javamm(java.io.InputStream stream) {
    this(stream, null);
  }

  /** Constructor with InputStream and supplied encoding */
  public Javamm(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("	   during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try {
      jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source = new JavammTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
    ReInit(stream, null);
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream.ReInit(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Javamm(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("	   during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavammTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
    } else {
      jj_input_stream.ReInit(stream, 1, 1);
    }
    if (token_source == null) {
      token_source = new JavammTokenManager(jj_input_stream);
    }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Javamm(JavammTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("	   during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavammTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++)
      jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++)
      jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen)
              c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
  }

  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();

  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0;
      Token tok = token;
      while (tok != null && tok != jj_scanpos) {
        i++;
        tok = tok.next;
      }
      if (tok != null)
        jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind)
      return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos)
      throw jj_ls;
    return false;
  }

  /** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  /** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null)
        t = t.next;
      else
        t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt = token.next) == null)
      return (jj_ntk = (token.next = token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
      return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1 << j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1 << j)) != 0) {
            la1tokens[32 + j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled;

  /** Trace enabled. */
  static final public boolean trace_enabled() {
    return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg;
            jj_lastpos = jj_scanpos = p.first;
            switch (i) {
            case 0:
              jj_3_1();
              break;
            case 1:
              jj_3_2();
              break;
            case 2:
              jj_3_3();
              break;
            case 3:
              jj_3_4();
              break;
            case 4:
              jj_3_5();
              break;
            case 5:
              jj_3_6();
              break;
            case 6:
              jj_3_7();
              break;
            case 7:
              jj_3_8();
              break;
            case 8:
              jj_3_9();
              break;
            }
          }
          p = p.next;
        } while (p != null);

      } catch (LookaheadSuccess ls) {
      }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) {
        p = p.next = new JJCalls();
        break;
      }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la;
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
